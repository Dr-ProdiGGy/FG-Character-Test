//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/FGController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @FGController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @FGController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""FGController"",
    ""maps"": [
        {
            ""name"": ""FGControls"",
            ""id"": ""48bf6be0-8262-4484-b298-a1d506e43376"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""0e70fafb-3762-4f2d-b031-586a4b5fbe78"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Check"",
                    ""type"": ""Value"",
                    ""id"": ""b29b609d-6d1f-4ba5-ac39-bcfd7c72bf2c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""85dad4e5-85df-4937-8fe6-30c21c39d5e0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""00b3687d-44b4-4ac0-b9f3-729fbdd82923"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""82802090-468d-4309-b10c-e62d6a70862e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""de4266be-b600-4374-b625-fe63224dd8c6"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Check"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Stick Vector 2"",
                    ""id"": ""f5df3a99-8776-4a28-98c8-38acb500111f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Check"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""501c5ca2-ab1f-49ff-8b2b-549e8ce6ab57"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Check"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b4a9f336-5f7d-46cf-9fac-f47868aabfda"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Check"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""555da658-e04b-4193-a2c7-8e7a08660a68"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Check"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""146d2211-e15d-4ea6-87d7-4e007839cd8d"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Check"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // FGControls
        m_FGControls = asset.FindActionMap("FGControls", throwIfNotFound: true);
        m_FGControls_Walk = m_FGControls.FindAction("Walk", throwIfNotFound: true);
        m_FGControls_Check = m_FGControls.FindAction("Check", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FGControls
    private readonly InputActionMap m_FGControls;
    private List<IFGControlsActions> m_FGControlsActionsCallbackInterfaces = new List<IFGControlsActions>();
    private readonly InputAction m_FGControls_Walk;
    private readonly InputAction m_FGControls_Check;
    public struct FGControlsActions
    {
        private @FGController m_Wrapper;
        public FGControlsActions(@FGController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walk => m_Wrapper.m_FGControls_Walk;
        public InputAction @Check => m_Wrapper.m_FGControls_Check;
        public InputActionMap Get() { return m_Wrapper.m_FGControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FGControlsActions set) { return set.Get(); }
        public void AddCallbacks(IFGControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_FGControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FGControlsActionsCallbackInterfaces.Add(instance);
            @Walk.started += instance.OnWalk;
            @Walk.performed += instance.OnWalk;
            @Walk.canceled += instance.OnWalk;
            @Check.started += instance.OnCheck;
            @Check.performed += instance.OnCheck;
            @Check.canceled += instance.OnCheck;
        }

        private void UnregisterCallbacks(IFGControlsActions instance)
        {
            @Walk.started -= instance.OnWalk;
            @Walk.performed -= instance.OnWalk;
            @Walk.canceled -= instance.OnWalk;
            @Check.started -= instance.OnCheck;
            @Check.performed -= instance.OnCheck;
            @Check.canceled -= instance.OnCheck;
        }

        public void RemoveCallbacks(IFGControlsActions instance)
        {
            if (m_Wrapper.m_FGControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFGControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_FGControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FGControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FGControlsActions @FGControls => new FGControlsActions(this);
    public interface IFGControlsActions
    {
        void OnWalk(InputAction.CallbackContext context);
        void OnCheck(InputAction.CallbackContext context);
    }
}
