//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/FGController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @FGController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @FGController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""FGController"",
    ""maps"": [
        {
            ""name"": ""FGControls"",
            ""id"": ""24ddb72f-c215-4de4-8078-23d56dddad08"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""8a5bf165-cdc0-4386-a6a1-5d9b1b2515d5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""c143f683-1a52-4510-8aa1-31243acf51cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InputCheck"",
                    ""type"": ""Value"",
                    ""id"": ""5d665953-df71-49ac-aba0-07081029531e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1337a096-ac55-4bab-8421-5d15c5248227"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBScheme"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""3c4f4607-d0e2-4ded-9554-9f78936072ef"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e1e2c230-ccb3-49b1-aa99-0024e154a08b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBScheme"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7c94298d-d3f1-40a5-8b9f-e40e56aff3c0"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBScheme"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""8c1dc2a7-b898-4ccb-96c2-96d8ce2a7195"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InputCheck"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f6231194-dd0f-4c25-a203-10c2d7104ed4"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBScheme"",
                    ""action"": ""InputCheck"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3fd89533-5bd2-44f5-a137-9f6d3a3671c7"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBScheme"",
                    ""action"": ""InputCheck"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""736e9dc1-9252-4bb1-b8b0-71f2d8df7d61"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBScheme"",
                    ""action"": ""InputCheck"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b1556eec-b130-4257-bb56-9d4a8688c910"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBScheme"",
                    ""action"": ""InputCheck"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KBScheme"",
            ""bindingGroup"": ""KBScheme"",
            ""devices"": []
        }
    ]
}");
        // FGControls
        m_FGControls = asset.FindActionMap("FGControls", throwIfNotFound: true);
        m_FGControls_Walk = m_FGControls.FindAction("Walk", throwIfNotFound: true);
        m_FGControls_Jump = m_FGControls.FindAction("Jump", throwIfNotFound: true);
        m_FGControls_InputCheck = m_FGControls.FindAction("InputCheck", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FGControls
    private readonly InputActionMap m_FGControls;
    private List<IFGControlsActions> m_FGControlsActionsCallbackInterfaces = new List<IFGControlsActions>();
    private readonly InputAction m_FGControls_Walk;
    private readonly InputAction m_FGControls_Jump;
    private readonly InputAction m_FGControls_InputCheck;
    public struct FGControlsActions
    {
        private @FGController m_Wrapper;
        public FGControlsActions(@FGController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walk => m_Wrapper.m_FGControls_Walk;
        public InputAction @Jump => m_Wrapper.m_FGControls_Jump;
        public InputAction @InputCheck => m_Wrapper.m_FGControls_InputCheck;
        public InputActionMap Get() { return m_Wrapper.m_FGControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FGControlsActions set) { return set.Get(); }
        public void AddCallbacks(IFGControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_FGControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FGControlsActionsCallbackInterfaces.Add(instance);
            @Walk.started += instance.OnWalk;
            @Walk.performed += instance.OnWalk;
            @Walk.canceled += instance.OnWalk;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @InputCheck.started += instance.OnInputCheck;
            @InputCheck.performed += instance.OnInputCheck;
            @InputCheck.canceled += instance.OnInputCheck;
        }

        private void UnregisterCallbacks(IFGControlsActions instance)
        {
            @Walk.started -= instance.OnWalk;
            @Walk.performed -= instance.OnWalk;
            @Walk.canceled -= instance.OnWalk;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @InputCheck.started -= instance.OnInputCheck;
            @InputCheck.performed -= instance.OnInputCheck;
            @InputCheck.canceled -= instance.OnInputCheck;
        }

        public void RemoveCallbacks(IFGControlsActions instance)
        {
            if (m_Wrapper.m_FGControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFGControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_FGControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FGControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FGControlsActions @FGControls => new FGControlsActions(this);
    private int m_KBSchemeSchemeIndex = -1;
    public InputControlScheme KBSchemeScheme
    {
        get
        {
            if (m_KBSchemeSchemeIndex == -1) m_KBSchemeSchemeIndex = asset.FindControlSchemeIndex("KBScheme");
            return asset.controlSchemes[m_KBSchemeSchemeIndex];
        }
    }
    public interface IFGControlsActions
    {
        void OnWalk(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnInputCheck(InputAction.CallbackContext context);
    }
}
